// Code generated by "stringer -type=NodeType"; DO NOT EDIT.

package zappaclang

import "strconv"

func _() {
	// An "invalid array index" compiler error signifies that the constant values have changed.
	// Re-run the stringer command to generate them again.
	var x [1]struct{}
	_ = x[NodeEOF-0]
	_ = x[NodeAssign-1]
	_ = x[NodeLParen-2]
	_ = x[NodeRParen-3]
	_ = x[NodeNumber-4]
	_ = x[NodeVariable-5]
	_ = x[NodeAdd-6]
	_ = x[NodeSub-7]
	_ = x[NodeMult-8]
	_ = x[NodeExp-9]
	_ = x[NodeDiv-10]
	_ = x[NodeFdiv-11]
	_ = x[NodeAnd-12]
	_ = x[NodeOr-13]
	_ = x[NodeXor-14]
	_ = x[NodeInv-15]
	_ = x[NodeMod-16]
	_ = x[NodeLShift-17]
	_ = x[NodeRShift-18]
	_ = x[NodeAbs-19]
	_ = x[NodeSetOutput-20]
	_ = x[NodeSave-21]
	_ = x[NodeLoad-22]
	_ = x[NodeClear-23]
}

const _NodeType_name = "NodeEOFNodeAssignNodeLParenNodeRParenNodeNumberNodeVariableNodeAddNodeSubNodeMultNodeExpNodeDivNodeFdivNodeAndNodeOrNodeXorNodeInvNodeModNodeLShiftNodeRShiftNodeAbsNodeSetOutputNodeSaveNodeLoadNodeClear"

var _NodeType_index = [...]uint8{0, 7, 17, 27, 37, 47, 59, 66, 73, 81, 88, 95, 103, 110, 116, 123, 130, 137, 147, 157, 164, 177, 185, 193, 202}

func (i NodeType) String() string {
	if i < 0 || i >= NodeType(len(_NodeType_index)-1) {
		return "NodeType(" + strconv.FormatInt(int64(i), 10) + ")"
	}
	return _NodeType_name[_NodeType_index[i]:_NodeType_index[i+1]]
}
