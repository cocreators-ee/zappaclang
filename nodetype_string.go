// Code generated by "stringer -type=NodeType"; DO NOT EDIT.

package zappaclang

import "strconv"

func _() {
	// An "invalid array index" compiler error signifies that the constant values have changed.
	// Re-run the stringer command to generate them again.
	var x [1]struct{}
	_ = x[NodeEOF-0]
	_ = x[NodeParsingStopped-1]
	_ = x[NodeAssign-2]
	_ = x[NodeLParen-3]
	_ = x[NodeRParen-4]
	_ = x[NodeNumber-5]
	_ = x[NodeVariable-6]
	_ = x[NodeAdd-7]
	_ = x[NodeSub-8]
	_ = x[NodeMult-9]
	_ = x[NodeExp-10]
	_ = x[NodeDiv-11]
	_ = x[NodeFdiv-12]
	_ = x[NodeAnd-13]
	_ = x[NodeOr-14]
	_ = x[NodeXor-15]
	_ = x[NodeInv-16]
	_ = x[NodeMod-17]
	_ = x[NodeLShift-18]
	_ = x[NodeRShift-19]
	_ = x[NodeAbs-20]
	_ = x[NodeSetOutput-21]
	_ = x[NodeSave-22]
	_ = x[NodeLoad-23]
	_ = x[NodeClear-24]
}

const _NodeType_name = "NodeEOFNodeParsingStoppedNodeAssignNodeLParenNodeRParenNodeNumberNodeVariableNodeAddNodeSubNodeMultNodeExpNodeDivNodeFdivNodeAndNodeOrNodeXorNodeInvNodeModNodeLShiftNodeRShiftNodeAbsNodeSetOutputNodeSaveNodeLoadNodeClear"

var _NodeType_index = [...]uint8{0, 7, 25, 35, 45, 55, 65, 77, 84, 91, 99, 106, 113, 121, 128, 134, 141, 148, 155, 165, 175, 182, 195, 203, 211, 220}

func (i NodeType) String() string {
	if i < 0 || i >= NodeType(len(_NodeType_index)-1) {
		return "NodeType(" + strconv.FormatInt(int64(i), 10) + ")"
	}
	return _NodeType_name[_NodeType_index[i]:_NodeType_index[i+1]]
}
